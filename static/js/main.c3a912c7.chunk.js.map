{"version":3,"sources":["components/Planet.js","components/favourite.js","App.js","serviceWorker.js","index.js"],"names":["App","state","id","_this2","this","data","props","favItem","display","map","planet","i","isFavourite","push","react_default","a","createElement","key","Card","className","index_es","icon","faHeart","onClick","e","setState","name","react_router_dom","to","pathname","Component","Favourite","items","_this","location","removeItem","list","splice","displayFavs","undefined","length","i1","fetch","then","res","json","react_router","exact","path","render","Planet","component","Favourites","Boolean","window","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c3a912c7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"../App.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faHeart } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    id: null,\r\n  };\r\n\r\n  render() {\r\n    let data = this.props.data;\r\n    let favItem = [];\r\n    let display = data.map((planet, i) => {\r\n      if (planet.isFavourite) favItem.push(planet);\r\n      return (\r\n        <div key={i}>\r\n          <Card className=\"card\">\r\n            <FontAwesomeIcon\r\n              id={i}\r\n              icon={faHeart}\r\n              onClick={(e) => {\r\n                planet.isFavourite = !planet.isFavourite;\r\n                this.setState({ id: i });\r\n              }}\r\n              className={planet.isFavourite ? \"like heart\" : \"dislike heart\"}\r\n            ></FontAwesomeIcon>\r\n            <h2>{planet.name}</h2>\r\n          </Card>\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className=\"app\">\r\n        {display}\r\n\r\n        <Link to={{ pathname: \"/Favourite\", data: favItem }}>\r\n          <button className=\"open-fav\"></button>\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faHeart } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../App.css\";\r\n\r\nclass Favourite extends Component {\r\n  state = {\r\n    items: this.props.location.data,\r\n  };\r\n  removeItem = (i) => {\r\n    const list = this.state.items;\r\n\r\n    list.splice(i, 1);\r\n    this.setState({ items: list });\r\n  };\r\n\r\n  render() {\r\n    let data = this.state.items;\r\n    let displayFavs = [];\r\n    displayFavs =\r\n      data === undefined\r\n        ? \"\"\r\n        : data.map((planet, i) => {\r\n            return planet.isFavourite ? (\r\n              <div key={i}>\r\n                <Card className=\"card\">\r\n                  <FontAwesomeIcon\r\n                    icon={faHeart}\r\n                    id={i}\r\n                    onClick={(e) => {\r\n                      planet.isFavourite = false;\r\n                      this.removeItem(i);\r\n                    }}\r\n                    className={planet.isFavourite ? \"like heart\" : \"dislike heart\"}\r\n                  ></FontAwesomeIcon>\r\n                  <h2>{planet.name}</h2>\r\n                </Card>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            );\r\n          });\r\n\r\n    return (\r\n      <div className=\"app\">\r\n        {displayFavs.length === 0 ? <h1>No Items are selected as Favourite</h1> : \"\"}\r\n        {displayFavs}\r\n        <Link to=\"/\">\r\n          <button className=\"go-back\"></button>\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Favourite;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Planet from \"./components/Planet\";\nimport Favourites from \"./components/favourite\";\nimport { Route } from \"react-router-dom\";\n\nclass App extends Component {\n  state = {\n    i1: [],\n  };\n\n  componentDidMount() {\n    fetch(`https://assignment-machstatz.herokuapp.com/planet`)\n      .then((res) => res.json())\n      .then((json) => {\n        this.setState({\n          i1: json,\n        });\n      });\n  }\n  render() {\n    let data = this.state.i1;\n    return (\n      <div>\n        <h1> Planets </h1>\n        <Route exact path=\"/\" render={() => <Planet data={data} />} />\n\n        <Route exact path=\"/Favourite\" component={Favourites} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}